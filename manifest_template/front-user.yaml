#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: sso-authc-info
  # namespace: # don't set
data:
  GOOGLE_CLIENT_ID: ""
  GOOGLE_CLIENT_SECRET: ""
  GOOGLE_REDIRECT_URI: "" # must actual urls (https://**.example.com:**), not ip address (https://**.**.**.**:**)
  GITHUB_CLIENT_ID: ""
  GITHUB_CLIENT_SECRET: ""
  TWITTER_CLIENT_ID: ""
  TWITTER_CLIENT_SECRET: ""

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-container-info
  # namespace: # don't set
data:
  EVENT_PROTOCOL: "http"
  EVENT_HOST: "event-user"
  EVENT_PORT: "8080"
  SPERKER_PROTOCOL: "http"
  SPERKER_HOST: "speaker-user"
  SPERKER_PORT: "8080"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-user
  # namespace: # don't set
spec:
  selector:
    matchLabels:
      name: front-user
  replicas: {{ replicas }}
  template:
    metadata:
      labels:
        name: front-user
    spec:
      containers:
      - name: front-user
        image: "{{ image_name }}:{{ image_tag }}"
        envFrom:
        - prefix: SERVICE_
          configMapRef:
            name: service-container-info
        - prefix: SSO_
          configMapRef:
            name: sso-authc-info
        env:
        - name: LC_ALL
          value: C.UTF-8
        - name: LANG
          value: C.UTF-8
        - name: PYTHONIOENCODING
          value: utf-8

---
apiVersion: v1
kind: Service
metadata:
  name: front-user
  labels:
    name: front-user
  # namespace: # don't set
spec:
  type: NodePort
  ports:
  - name: flask
    port: 5000
    targetPort: 5000
    nodePort: "{{ access_port }}"
  selector:
    name: front-user
